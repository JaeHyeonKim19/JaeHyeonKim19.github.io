{"componentChunkName":"component---src-templates-post-template-jsx","path":"/codingtest/boj-15652-n-and-m-4/2020-07-19 09:00:00 +0900","result":{"pageContext":{"html":"<table>\n<thead>\n<tr>\n<th>시간 제한</th>\n<th>메모리 제한</th>\n<th>제출</th>\n<th>정답</th>\n<th>맞은 사람\u001d</th>\n<th>정답 비율</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1초</td>\n<td>512MB</td>\n<td>8592</td>\n<td>7055</td>\n<td>5816</td>\n<td>82.614%</td>\n</tr>\n</tbody>\n</table>\n<h3>문제</h3>\n<p>자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.</p>\n<ul>\n<li>1부터 N까지 자연수 중에서 M개를 고른 수열</li>\n<li>같은 수를 여러 번 골라도 된다.</li>\n<li>고른 수열은 비내림차순이어야 한다. - 길이가 K인 수열 A가 A1 ≤ A2 ≤ ... ≤ AK-1 ≤ AK를 만족하면, 비내림차순이라고 한다.</li>\n</ul>\n<h3>입력</h3>\n<p>첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>\n<h3>출력</h3>\n<p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>\n<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>\n<h3>예제 입력1</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3 1</code></pre></div>\n<h3>예제 출력1</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n2\n3</code></pre></div>\n<h3>예제 입력2</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">4 2</code></pre></div>\n<h3>예제 출력2</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4</code></pre></div>\n<h3>예제 입력3</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3 3</code></pre></div>\n<h3>예제 출력3</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 1 1\n1 1 2\n1 1 3\n1 2 2\n1 2 3\n1 3 3\n2 2 2\n2 2 3\n2 3 3\n3 3 3</code></pre></div>\n<h3>풀이</h3>\n<p>재귀함수를 이용한다. 1부터 n까지 함수를 한 번 호출한다. 함수 내부에서는 입력된 숫자를 배열의 알맞은 위치에 저장하고 본인숫자부터 n까지 다시 호출한다. 배열을 사용하는 이유는 m번 만큼 호출 되었을때 그 이전 값들을 함께 출력해주기 위해서이다.</p>\n<h3>제출 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> currentProgression<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> makeProgression <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> currentNumber<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BufferedWriter</span> bw<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\tcurrentProgression<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> currentNumber<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> currentProgression<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tbw<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>currentProgression<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tbw<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> currentNumber<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">makeProgression</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">// init</span>\n    \t<span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token class-name\">StringTokenizer</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tn <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tm <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tcurrentProgression <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    \t<span class=\"token comment\">// solve</span>\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token function\">makeProgression</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">}</span>\n\n    \t<span class=\"token comment\">// print</span>\n    \tbw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","title":"[자바]백준 15652 N과 M(4)","date":"2020-07-19"}}}