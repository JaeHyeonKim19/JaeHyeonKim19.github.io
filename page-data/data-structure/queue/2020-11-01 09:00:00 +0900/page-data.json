{"componentChunkName":"component---src-templates-post-template-jsx","path":"/data-structure/queue/2020-11-01 09:00:00 +0900","result":{"pageContext":{"html":"<h3>큐</h3>\n<p>큐는 데이터를 일시적으로 쌓아 두기 위한 자료구조로 먼저 넣은 데이터가 먼저 나오는 FIFO (First In First Out)구조로 되어 있다. 은행 창구에서 차례를 기다리는 대기열이나 마트에서 계산을 기다리는 대기열 등을 예로 들 수 있다. 컴퓨터에서는 프린터의 출력 처리, 윈도 시스템의 메시지 처리기, 프로세스 관리 등 데이터가 입력된 시간 순서대로 처리해야 할 필요가 있는 상황에 이용된다.</p>\n<p>큐는 선형, 환형, 연결 리스트로 구현될 수 있다. 선형으로 구현하게 될 경우 deque(제일 앞의 자료를 뽑아내는 것) 할 때 마다 배열에 들어있는 데이터들을 앞으로 옮겨주는 작업을 해야하기 때문에 비효율적이다.(deque를 할 때 마다 O(n) 복잡도) 이를 극복하기 위해서는 환형구조로 구현하면 된다. 환형의 경우 배열의 마지막 인덱스까지 데이터가 들어 있어도 데이터를 추가했을 때 첫 번째 인덱스로 돌아가 데이터를 추가하기 때문이다. 하지만 환형구조도 첫 번쩨 인덱스에 데이터가 존재하면 오버플로우가 발생한다는 단점이 있는데, 이를 극복하려면 리스트 구조로 구현하면 된다. 리스트로 구현하게되면 큐의 길이를 쉽게 조절할 수 있어 오버플로우가 발생하지 않는다.</p>\n<h3>큐 구현하기</h3>\n<p>위에서 설명한 바와 같이 선형, 환형, 리스트 세 가지 형태로 구현할 수 있다. 여기서는 환형으로 구현하는 연습을 해보자. 생성자와 데이터를 추가하는 enque, 데이터를 제거하고 그 값을 반환하는 deque를 구현해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 큐의 용량</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> front<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 첫 번째 요소 커서</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rear<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 마지막 요소 커서</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 현재 데이터 수</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> que<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 큐 본체</span>\n\n\t<span class=\"token comment\">// 생성자</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tnum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tfront <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\trear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tmax <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\tque <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OutOfMemoryError</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">enque</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BufferOverflowException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">>=</span> max<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferOverflowException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tque<span class=\"token punctuation\">[</span>rear<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\tnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rear <span class=\"token operator\">==</span> max<span class=\"token punctuation\">)</span>\n\t\t\trear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">deque</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BufferUnderflowException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferUnderflowException</span>\n\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> que<span class=\"token punctuation\">[</span>front<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tnum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>front <span class=\"token operator\">==</span> max<span class=\"token punctuation\">)</span>\n\t\t\tfront <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%81%90_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)\">큐 - 위키 백과</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/60547893\">자료구조와 함께 배우는 알고리즘 입문 (자바편)</a></li>\n</ul>","title":"[자료구조] 큐(Queue)","date":"2020-11-01"}}}